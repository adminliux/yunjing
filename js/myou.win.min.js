/**
 * =================================================================
 * 窗口类,　封装了窗口及各对话框组件
 * 
 * @author      QipanLee
 * @email       panqili2120@sina.com
 * @corporation MYOU
 * @date     2011-10-25
 * @version  1.0
 * 
 *  =================================================================
 */

var MyouWin = { 
	/**
	 * 对话框的 DOM 对象
	 */
	obj: null,
	
	/**
	 * 当前对话框的窗口对象, 为 DOM 元素，id 为 dialog
	 *  
	 */
	win: null,
	
	/**
	 * model对话框的背景的 DOM 对象, 此对象 id 为 modelBack
	 */
	modelObj: null,
	
	/**
	 * Ｍodel窗口及背景的前后显示次序
	 */
	zIndex: 3,

	/** 对话框的宽 */
	width: 0,
	
	/** 对话框的高 */
	height: 0,
	
	/**
	 * 可以多Ｍodel窗口显示，此数组用于记录所有的窗口
	 */
	his: [],
	
	/**
	 * 添加按钮时使用
	 */
	_buttons: [],
	
	/**
	 * 对象初始化方法
	 * 
	 * @param _argus[
	 * 				 msg,    		显示的信息, 可显示ＨＴＭＬ
	 *               tiltle,		标题，空值直接隐藏此ＤＩＶ
	 *               width,			宽
	 *               height, 		高
	 *               isMode, 		是否模态窗口（布尔类型）
	 *               hideOkButton,  隐藏按钮区域
	 *               autoClose		自动关闭(number类型，多少秒后自动关闭)
	 *               dragAble       是否可以拖动(boolean类型，默认：true)
	 *               showClose      是否显示关闭按钮(boolean类型，默认：false)
	 *               isFixed		是否固定窗口的位置(boolean类型，默认：false)
	 *               ]
	 */
	init: function( _argus )
	{
		
		// ===初始化==================================================
		//先隐藏掉所有select
			$('select').css('display', 'none');
		// 初始化宽，默认２５０像素
		_argus['width'] = _argus['width'] || 300;
		// 初始化高，默认１４０像素
		_argus['height'] = _argus['height'] || 100;
		
		/* 初始化DOM */
		// 初始化当前对话框的DOM对象
		var dialogDom = document.createElement('div');
		// 设置对话框的基本样式
		dialogDom.className = 'dialog';
		// 创建基本内容，其中dd元素都是将要被替换的元素
		dialogDom.innerHTML 
					= '\
					<table class="dialog_main">\
					<tbody>\
					  <tr class="dialog_title">\
					    <th class="d_f"></th>\
					    <th class="d_t_c">\
					      <div class="d_title_div">\
						    <dd class="d_title_text">这是标题</dd>\
						  </div>\
					    </th>\
					    <th class="d_e"></th>\
					  </tr>\
					 <tr class="dialog_content" height="50">\
					   <td class="d_f"></td>\
					   <td class="d_c_c" valign="middle">\
					     <dd style="width: 350px;" class="dialog_content_text">正文喽</dd>\
					   </td>\
					   <td class="d_e"></td>\
					 </tr>\
					 <tr class="dialog_buttons">\
					   <td class="d_f"></td>\
					   <td class="d_b_c"><dd><button>关闭</button></dd></td>\
					   <td class="d_e"></td>\
					 </tr>\
					 <tr class="dialog_ends">\
					   <td class="d_f"></td>\
					   <td class="d_e_c"></td>\
					   <td class="d_e"></td>\
					 </tr>\
					 </tbody>\
					</table>';
	
		// 将此对话框添加到页面中
		getTempBox().appendChild(dialogDom);
		// 所有将要被更新的DOM元素
		var oldDOM = dialogDom.getElementsByTagName('dd');
		
		// 创建基本元素
		var newTitle = null, newContent = document.createElement('div'), newButtons = null;
		
		// 初始化对话框的宽
		this.width = _argus['width'];
		// 初始化对话框的高
		this.height = _argus['height'];
		
		// ===标题======================================================
		// 是否显示标题
		if( !_argus['title'] ) 
		{
			// 鼠标样式为显示可以移动
			dialogDom.style.cursor = 'move';
			
			// 所在的Table中标题部分的th
			var thParent = oldDOM[0].parentNode.parentNode;
			// 不显示标题栏
			thParent.style.height = '5px';
			thParent.removeChild( oldDOM[0].parentNode );
			
			// 绑定拖拽事件
			if( _argus['dragAble'] != false)
			{
				//为任意一个 div 绑定拖拽动作
				new MyouDrag().bind( dialogDom );
			}
		} 
		else 
		{
			var titleContentHtml = '';
			// 创建对话框标题区域的ＤＩＶ
			newTitle = document.createElement('div');
			// 标题 的  div 为 div_dialog_box 的子 ＤＩＶ
			newTitle.className   = 'd_title_text';
			titleContentHtml += _argus['title'] || '';
			newTitle.innerHTML = titleContentHtml;
			// 将可拖拽象区域的鼠标样式为 move
			newTitle.style.cursor = 'move';
			// 将标题放入对话框中
			oldDOM[0].parentNode.replaceChild(newTitle, oldDOM[0]);
			// 绑定拖拽事件
			if( _argus['dragAble'] != false)
			{
				new MyouDrag().bind(dialogDom, newTitle);
			}
			// 是否显示关闭按钮,默认为显示
			if( _argus['showClose'] != false)
			{
				var closeBtn = document.createElement('a');
				closeBtn.href="javascript:;";
				closeBtn.onclick = function()
				{
					MyouWin.close( this );
				};
				closeBtn.title = '关闭';
				closeBtn.className = 'dialog_close';
				closeBtn.innerHTML = 'x';
				newTitle.parentNode.appendChild( closeBtn );
			}
		}
		
		// ===主内容====================================================		
		newContent.style.width = this.width + 'px';
		newContent.style.height = this.height + 'px';
		newContent.className = 'dialog_content_text';
		newContent.innerHTML = _argus['msg'] || '';
		// 更新内容
		oldDOM[0].parentNode.replaceChild( newContent, oldDOM[0]);
		
		// ===底部按钮======================================================
		// 假如显示确定按钮
		if( this._buttons.length > 0)
		{
			// 创建一个显示按钮的ＤＩＶ
			newButtons = document.createElement('div');
			// 设置显示的样式
			newButtons.className = 'd_b_c';
			
			// 创建一个新按钮对象（此对象用作一个模板，方便下面创建新的按钮）
			var newTmpl = document.createElement('button'), newButton, curDDRef = oldDOM[0], curParent = oldDOM[0].parentNode;
			//newButton.appendChild( document.createTextNode('') );
			for(var i = 0; i < this._buttons.length; i++) {
				
				newButton = newTmpl.cloneNode(true);
				// 设置按钮的文字显示
				newButton.innerHTML = this._buttons[i][0];
				// 是否为函数，若是函数则绑定指定的事件
				if( (typeof this._buttons[i][1]).toLowerCase() === 'function' ) 
				{
					newButton.onclick = this._buttons[i][1];
				} else 
				{
					// 给默认的确定按钮绑定事件
					newButton.onclick = function(){MyouWin.close( this );};
				}
				// 将按钮显示到窗口中
				curParent.appendChild( newButton );
			}
			
			// 在后面空三格-仅美观
			var spaceSpan = document.createElement('span');
			spaceSpan.innerHTML = '&nbsp;&nbsp;&nbsp;';
			curParent.appendChild( spaceSpan );
			
			// 删除最后一个预定义的DD标签
			curParent.removeChild( curDDRef );
			// 此对象为一次性的数组，删除对象释放内存
			this._buttons = [];
			newButton = null;
			delete newButton;
			
		}
		// 不显示按钮区域
		else 
		{
			var curParent = oldDOM[0].parentNode;
			curParent.parentNode.removeChild(curParent);
		}
		
		// 当前内容容器
		this.obj = newContent;
		// 当前窗口对象
		this.win = dialogDom;
		// 设置对话框的层叠次序
		this.win.style.zIndex = this.zIndex;
		
		// 之所以加２是方便多个模态窗口时，背景层叠的切换
		this.zIndex += 2;
		
		// 判断是否作为模态窗口显示
		if( _argus['isModel'] )
		{
			this.createModel();
		}
		
		//iframe 加载完成之前  显示加载中的等待页面 把 iframe 隐藏起来
		 //获得 iframe 对象
		 if(newContent != null){
			 if( _argus['msg'].toString().toLowerCase().contains('iframe')) {
				 
				 var curriframe =  newContent.firstChild;
				 curriframe.style.display = 'none';
				 //var tipstr = '<div style="margin-top:80%; text-align:center">加载中...</div>';
				 var tipdom = document.createElement('div');
				 tipdom.className = 'load';
				 tipdom.id ='klsdjfoksj';
				 //tipdom.innerHTML = tipstr;
				 newContent.appendChild(tipdom);
				 if (curriframe.attachEvent){   
					 curriframe.attachEvent("onload", 
							 function(){ curriframe.style.display = '';tipdom.style.display = 'none';});
				 }else{ curriframe.onload = 
					 function(){ curriframe.style.display = '';tipdom.style.display = 'none';};
				}
			 }
			 
		 } 
		
		// 是否启用指定时间自动关闭窗口
		this.autoClose( _argus['autoClose'] );
		
		if( _argus['isFixed'] == true )
		{
			if( navigator.userAgent.indexOf('MSIE 6') == -1 )
			{
				this.win.style.position = 'fixed';
			}
		}
		
	},
	
	createModel: function()
	{
		// 系统中只有一个背景，　判断此页面是否含有背景的缓存
		if( !this.modelObj ) {
			// 没有背景，创建一个Ｄiv用来存放背景
			var back = document.createElement('div');
			// 设置　id　为　modelBack
			back.id = 'modelBack';
			// 显示的样式名称
			back.className = 'modelBack';
			// 添加到页面中
			getTempBox().appendChild(back);
			// 在此对象中缓存此对象的引用
			this.modelObj = back;
			this.modelObj.onclick = function()
			{
				// 如果出现了bug
				if( MyouWin.his.length < 1 )
				{
					this.style.display = 'none';
				}
			};
				
		}
		/* 初始化背景的大小及相关属性 */
		// 获取当前页面的高和宽
		var docJqRef = $(document.body);
		// 初始化背景宽，平铺到当前页面的大小
		this.modelObj.style.width = docJqRef.width() + 'px';
		// 初始化背景高，平铺到当前页面的大小
		this.modelObj.style.height = (window.screen.height - 150)   + 'px';
		// 设置背景可见
		this.modelObj.style.display = '';
		// 设置背景的层叠次序，为对话框之下
		this.modelObj.style.zIndex = (this.win.style.zIndex - 1) || 3;
		// 记录当前模态窗口
		this.his.push( this.win );
	},
	
	/**
	 * 居中
	 * 
	 * @param _obj 对话框信息
	 */
	center: function()
	{
		
		var width = this.win.clientWidth;
		var height = this.win.clientHeight;
		// 获取当前浏览器的文档显示窗口大小
		var winJqu = $(window);
		// 设置为宽度为水平对齐
		this.win.style.left = Math.floor(Math.max((winJqu.width() - width), 0)/2) + 'px';
		// 设置为宽度为当前窗口区域垂直对齐
		this.win.style.top = myou.constants.SCROLLBAR_TOP_LEN + Math.floor(Math.max((winJqu.height() - height), 0)/2) + 'px';
	},
	
	createWin: function( _argus ) {
		
		//如果_argus为空的话 设置成空的字符串
		_argus = _argus || [];
		_argus['isModel'] = true;
		_argus['msg'] = _argus['msg'] || '';
		this.init( _argus );
		
		// 居中
		this.center();
	}
	,
	/**
	 * 添加按钮
	 * @param _text [string(两个参数时)、或boolean(一个参数时)]
	 * @param _funs[可选参数, 可以为function, boolean]
	 */
	addButton: function( _text, _funs) {
		
		if( _funs == undefined ) 
		{
			switch( (typeof _text).toLowerCase() )
			{
				case 'boolean': 
					// 一个参数的布尔，用于绑定回车事件
					_funs = _text;
					// 默认按钮的文字
					_text = '确定'; 
					break;
				case 'undefined': 
					_funs = true;
					break;
				default:
					break;
			};
		}
		
		
		// 进行添加按钮
		this._buttons.push( [_text, _funs] );
		// 返回当前对象，以方便于多次添加
		
		return this;
	},
	
	/**
	 * alert对话框
	 */
	alert: function( _argus, funcName )
	{

		/* 若只有一个string的参数，直接用于显示 */
		// 判断所传过来的参数是否是“string”的数据类型
		if( (typeof _argus) === 'string')
		{
			// 参数为string，就直接将些当作msg使用
			var msg = _argus;
			// 初始化参数对象
			_argus = [];
			// 设置
			_argus['msg'] = msg;
		}
		// 初始化参数
		_argus = _argus || [];
		// 初始化宽，默认300像素
		_argus['width'] = _argus['width'] || 300;
		// 初始化高，默认80像素
		_argus['height'] = _argus['height'] || 80;
		// 绑定回车事件，按回车自动关闭窗口
		_argus['title'] = _argus['title'] || "提示";
		// 采用模态窗口进行显示
		_argus['isModel'] = _argus['isModel'] || true;
		// 添加确定按钮
		this.addButton('确定');
		// 初始化并生成窗口
		this.init( _argus );
		_argus['icon'] = _argus['icon'] || '/images/dialog/gou.gif';
		_argus['icon'] = '<img src=" ' + _argus['icon'] + '" class="iconImg" />';
		// 设置显示的文字内容
		this.obj.innerHTML = _argus['icon'] + '<div class="d_c_icon_cbox">'+ _argus['msg'] + '</div>\
									<div style="clear:both"></div>' ;
		// 居中窗口
		this.center();
		
	},
	
	
	/**
	 * alert对话框
	 */
	alertErr: function( _argus )
	{

		/* 若只有一个string的参数，直接用于显示 */
		// 判断所传过来的参数是否是“string”的数据类型
		if( (typeof _argus) === 'string')
		{
			// 参数为string，就直接将些当作msg使用
			var msg = _argus;
			// 初始化参数对象
			_argus = [];
			// 设置
			_argus['msg'] = msg;
		}
		// 初始化参数
		_argus = _argus || [];
		// 初始化宽，默认300像素
		_argus['width'] = _argus['width'] || 300;
		// 初始化高，默认80像素
		_argus['height'] = _argus['height'] || 80;
		// 绑定回车事件，按回车自动关闭窗口
		_argus['title'] = _argus['title'] || "提示";
		// 采用模态窗口进行显示
		_argus['isModel'] = _argus['isModel'] || true;
		// 添加确定按钮
		this.addButton('确定');
		// 初始化并生成窗口
		this.init( _argus );
		_argus['icon'] = _argus['icon'] || '/images/dialog/info.png';
		_argus['icon'] = '<img src=" ' + _argus['icon'] + '" class="iconImg" />';

		// 设置显示的文字内容
		this.obj.innerHTML = _argus['icon'] + '<div class="d_c_icon_cbox">'+ _argus['msg'] + '</div>\
									<div style="clear:both"></div>' ;
		// 居中窗口
		this.center();
		
	},
	
	
	/**
	 * 确认对话框
	 * @params _argus 1. 采用上面的{}对象形式
	 * 
	 * 				  2. 传统的传参方式，此时可以传三个参数，第一个参数是必选，后面两个可选
	 *                      (msg[, okHandler][, cancelHandler])
	 * @return 点击 “ＹＥＳ” 返回 true, 否则返回 false
	 */
	confirm: function( _argus ) {
		
		// 假如第一个参数为string说明采用非对象的形式进行传参 
		if( (typeof _argus).toLowerCase() === 'string') 
		{
			var str = _argus;
			_argus = [];
			_argus['msg'] = str;
			if( (typeof arguments[1]).toLowerCase() === 'function' )
			{
				_argus['ok'] = arguments[1];
			}
			if( (typeof arguments[2]).toLowerCase() === 'function' )
			{
				_argus['cancel'] = arguments[1];
			}
		}
		// 若无参数，则创建一个空数组
		_argus = _argus || [];
		// 取消回车事件
		_argus['enterKey'] = false;
		// 初始化宽，默认300像素
		_argus['width'] = _argus['width'] || 300;
		// 初始化高，默认80像素
		_argus['height'] = _argus['height'] || 80;
		// 是否固定窗口位置
		_argus['icon'] = _argus['icon'] || '/images/dialog/confirm.gif';
		_argus['icon'] = '<img src=" ' + _argus['icon'] + '" class="iconImg" />';
		
		// 获取当前ok的回调事件的引用
		var okCallBack = _argus['ok'];
		// 开始添加窗口，并进行显示
		this.addButton('确定', 
					// 绑定ＯＫ按钮的处理事件
					function() 
					{ 
						
						// 先关闭窗口
						MyouWin.close( this );
						
						// 假如绑定了ＯＫ的回调函数，则执行
						if( (typeof okCallBack).toLowerCase() === 'function' )
						{
							okCallBack(); 
						}
						// 返回false，阻止事件进一步的传播
						return false;
					})
		    .addButton('取消', _argus['cancel'] || 
		    		function()
		    		{
						// 执行默认的Cancel事件,关闭当前窗口
		    			MyouWin.close( this );
						// 返回false，阻止事件进一步的传播
		    			return false;
		    		})
		    .createWin({
		    	msg :  _argus['icon'] + '<div class="d_c_icon_cbox">'+ _argus['msg'] + '</div>\
									<div style="clear:both"></div>',
				title:  _argus['title'] || '注意喽',
				width:  _argus['width'],
				height: _argus['height']
			});
	},
	
	load: function( _argus )
	{
		var msg = '';
		if( (typeof _argus) === 'string')
		{
			msg = _argus;
			_argus = null;
		}
		_argus = _argus || {};
		msg    = msg    || _argus['msg'] || '等等我哦...';
		
		_argus['msg'] = '<div class="d_c_pic_cbox buzy"><img src="/images/loading.gif" class="cener_img" width=32 height=32 />&nbsp;' + msg + '</div>';
		_argus['width'] = _argus['width'] || 130;
		_argus['height'] = _argus['height'] || 60;
		_argus['hideOkButton'] = _argus['hideOkButton'] || true;
		_argus['enterKey'] = _argus['enterKey'] || false;
		// 是否固定窗口位置
		_argus['isFixed'] = _argus['isFixed'] || true;
		
		this.createWin( _argus );
		this.modelObj.style.cursor = 'wait';
	}
	,
	
	/**
	 * 关闭窗口
	 * param _obj  所触发的对象，_obj对象不为空刚说明此窗口为非模态窗口
	 */
	close: function( _obj )
	{
	
		if((typeof _obj) != 'undefined' || (typeof (_obj = arguments[1])) != 'undefined') {
			if( _obj.tagName.toLowerCase() === 'a' )
			{
				_obj = _obj.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode;
			} else if( _obj.tagName.toLowerCase() === 'button' )
			{
				_obj = _obj.parentNode.parentNode.parentNode.parentNode.parentNode;
			}
			var i = 0;
			for(var i = 0; i < this.his.length; i++) {
				if(this.his[i] == _obj) {
					this.his.splice(i, 1);
					break;
				}
			}
		} else {
			var his_len = this.his.length;
			// 获取当前所要关闭的窗口对象
			_obj = this.his[ his_len - 1];
			// 若当前对象不存在，则退出
			this.his.pop();
		}

		// 清除此窗口的DOM对象
		getTempBox().removeChild(_obj);
		_obj = null;
		if( this.his.length < 1 ) {
			this.modelObj.style.display = 'none';
			this.win = null;
		} else {
			// 激活最后一个窗口
			this.win = this.his[this.his.length - 1];
			this.win.style.zIndex = this.zIndex;
			this.modelObj.style.zIndex = this.zIndex - 1;
			
		}
		//_obj.style.display = 'none';
		// 再显示所有除当前对话框之外的select
		$('select').not('.dialog').css('display', '');
		
	}
	,
	/**
	 * 自动关闭
	 * @param 秒数（number）
	 */
	autoClose: function( seconds )
	{
		// 假如参数不合法，　不使用自动退出
		if( !seconds || ( typeof seconds ) != 'number' )
		{
			// 退出此方法
			return;
		}
		// 设置定时器，保证程序在指定时间后退出
		var curTimeout = setTimeout(function(){
			// 调用退出的方法
			MyouWin.close( );
			// 清除当前的定时器
			curTimeout = null;
			// 删除当前定时器的指针
			delete curTimeout;
			// 时间单位为毫秒，所以乘以１０００
		}, seconds * 1000);
	}
};
/**
 * 绑定到MyouFramework对象上，以让myou可以访问到
 */
myou.extend({win: MyouWin});
myou.blindpage.add('resize', 'ajustwin', function() {
	if(myou.win.win) {
		myou.win.center();
		if( myou.win.modelObj) {
			var docJqRef = $(document.body);
			// 初始化背景宽，平铺到当前页面的大小
			myou.win.modelObj.style.width = docJqRef.width() + 'px';
			// 初始化背景高，平铺到当前页面的大小
			myou.win.modelObj.style.height = docJqRef.height() + 'px';
		}
	}
});