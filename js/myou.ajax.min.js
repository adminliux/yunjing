/**
 * =================================================================
 * AJAX类组件
 * 此组件依赖于myou.min.js
 * 
 * @author      QipanLee
 * @email       panqili2120@sina.com
 * @corporation MYOU
 * @date     2011-10-25
 * @version  1.0
 * 
 *  =================================================================
 */

/**
 * 加载类
 */
var load = {
		
	/**
	 * 当前的iframe的Ｄom对象
	 */
	iframe : null,
	
	/**
	 * 当前的iframe的window对象
	 */
	iframeWin : null,
	
	/**
	 * 初始化函数，初始化默认的iframe对象
	 */
	init : function( src )
	{
		var LOAD_HTML_IFRAME = this.iframeFactory( 'LOAD_HTML_IFRAME' );
		// LOAD_HTML_IFRAME.src = src;
		this.iframe = LOAD_HTML_IFRAME;
		this.iframeWin = this.getIframeWin( 'LOAD_HTML_IFRAME' );
	},
	
	/**
	 * 根据指定的id来获取或生成iframe对象，保证唯一
	 */
	iframeFactory : function( id, name )
	{
		var obj = document.getElementById( id );
		if( obj )
		{
			obj.src='/images/title_bg.gif';
			return obj;	
		}
		
		try
		{
			obj = document.createElement('<iframe ' + (name == undefined ? '' :  'name="' + name + '"') + '>');
		} catch(ex)
		{
			obj = document.createElement('iframe');
			if( name != undefined)
			{
				obj.name = name;
			}
		}
		obj.id = id;
		obj.className = 'empty';
		obj.src='/images/title_bg.gif';
		document.body.appendChild( obj );
		return obj;
	},
	
	/**
	 * 获取iframe的window对象
	 */
	getIframeWin : function( id )
	{
		// 若直接以id关联frames集合的浏览器
		
		if( window.frames[id] )
		{
			// 防止document拒绝访问、为空等情况
			try{
				if( window.frames[id].document ) {
					
					// 直接返回当前id的iframe
					return window.frames[id];
				}
			} catch( e ) {};
			//return window.frames[id];
		}
		
		// 获取所有Ｉframe的集合
		var allIfr = document.getElementsByTagName('iframe');
		// 手动循环查找指定id的iframe
		for(var i = 0; i < allIfr.length; i++)
		{
			// 假如找到直接退出循环
			if( allIfr[i] && allIfr[i].id === id )
			{
				// 退出循环
				break;
			}
		}
		// 直接返回查找到的iframe没有找到返回undefined
		// 因为在ECMAScript语言中,for循环中定义的变量，
		// 与在外面定义一样，可以被访问
		return window.frames[i];
		
	},
	
	/**
	 * 加载HTML页面
	 * @param src 页面路径
	 * @param callback 回调函数
	 * @param onerror  加载失败时的回调函数
	 */
	loadHTML : function(src, callback, onerror)
	{
		// 初始化
		this.init( src );
		// 获取当前对象的引用
		var ifrWinBack = this.iframeWin, ifrBack = this.iframe, isLoad = false; 
		// 绑定页面加载完成时的事件
		this.iframe. onreadystatechange = this.iframe.onload = function()
		{
			// 防止重复调用此方法
			if( isLoad == true ) 
			{
				return;
			}
			// 防止document拒绝访问
			try{
				if( ifrWinBack.document ) 
				{
				}
			} catch( e ) 
			{
				// 假如有回调函数，则执行
				if( onerror ) 
				{
					onerror();
				} else 
				{
					callback(null);
				}
				// 防止重复执行
				isLoad = true;
				// 清除页面加载完成的函数
				ifrBack.onload = null;
				return;
			}
			if( ifrWinBack.document.readyState=="complete" ) 
			{
				// 防止重复执行
				isLoad = true;
				ifrBack.onload = null;
				// 执行回调函数
				callback( ifrWinBack.document );
			}
		};
		// 更新当前iframe的地址
		this.iframe.src = src;
	}
	,
	/**
	 * 
	 * @param _args json对象[
	  			targetForm: 表单对象 	
	  			method:方法
	  			onsuccess: 回调函数，当成功时
	  			ontimeout: 回调函数，当连接超时时
	  			
	  			
	 * 	]
	 */
	ajax: function( _args )
	{
		var ifr_obj = this.iframeFactory('AJAX_IFRAME', 'AJAX_IFRAME');
		ifr_obj.setAttribute('src', '/images/title_bg.gif');
		
		var target_form = null;
		
		if( _args['targetForm'] != undefined )
		{
			target_form = _args['targetForm'];
		}
		
		if(target_form == null)
		{
			return;
		}
		target_form.parentNode.insertBefore(ifr_obj, target_form);
		// 使用IFrame框架进行提交数据
		target_form.setAttribute('target', 'AJAX_IFRAME');
		// 提交表单
		target_form.submit();
		
		var ifr_win = this.getIframeWin('AJAX_IFRAME');
		
		var maxTryTimes = 8;
		var isSuccess   = false;
		var docRef      = null;
		
		var ontimeout = _args['ontimeout'];
		    onsuccess = _args['onsuccess'];
		var timer_ajax_listener =  setInterval(
				function()
				{
					// 在IE中访问Document时 有出现“访问拒绝”的可能
					try
					{
						docRef = ifr_win.document;
					}catch( e )
					{ 
						isSuccess = false;
					};
					if( docRef != null )
					{
						if( docRef.readyState=="complete" ) 
						{
								isSuccess = true;
						}
					}
					// 是否成功
					if( isSuccess == true )
					{
						// 先清除定时器
						clearInterval(timer_ajax_listener);
						timer_ajax_listener = null;
						delete timer_ajax_listener;
							
						if( (typeof onsuccess) != 'undefined' ) onsuccess(docRef);
						delete ifr_win, onsuccess, ontimeout, maxTryTimes, isSuccess;
						return;
					}
					// 判断是否连接超时
					else if( maxTryTimes-- < 0  ) 
					{
						// 判断此时监听的定时器是否为空
						if( (typeof timer_ajax_listener) != 'undefined' ) 
						{
							// 先清除定时器
							clearInterval(timer_ajax_listener);
							timer_ajax_listener = null;
							delete timer_ajax_listener;
						}
						// 假如没有连接成功
						if( isSuccess != true )
						{
							if( (typeof ontimeout) === 'function' )
							{
								return ontimeout();
							}
						}
					} 
					
				},
				1000
		);
		
	}
};