/**
 * =================================================================
 * 工具类
 * 
 * @author      QipanLee
 * @email       panqili2120@sina.com
 * @corporation MYOU
 * @date     2011-10-25
 * @version  1.0
 * 
 *  =================================================================
 */

/**
 * 根据Class名来查找对象
 */
function getElementsByClassName(className, tagName, node)
{
	tagName = tagName || '*';
	node = node || document;
	var all = node.getElementsByTagName(tagName), reg = new RegExp("(^|\\s)"
			+ className + "(\\s|$)"), res = [], index = 0;
	for ( var i = 0; i < all.length; i++)
	{
		if (reg.test(all[i].className))
		{
			res[index++] = all[i];
		}
	}
	return res;
}

/**
 * 获取相对document的坐标
 * 
 * @param event
 *            事件对象
 * @returns 封装{x : x, y : y}的对象
 */
function getCorInDoc(event)
{
	var val = {x:0, y:0};
	if ( event.pageX == null && event.clientX !=  null ) {
		var doc = document.documentElement, body = document.body;
		val.x = event.clientX + myou.constants.SCROLLBAR_LEFT_LEN - (doc && doc.clientLeft  || body && body.clientLeft || 0);
		val.y = event.clientY + myou.constants.SCROLLBAR_TOP_LEN - (doc && doc.clientTop  || body && body.clientTop  || 0);
	} else {
		val = {x: event.pageX, y: event.pageY};
	}
	return val;
}

/**
 * 获取指定DOM对象计算后当前的CSS属性值(包含外部ＣＳＳ, )
 * 
 * @param _obj
 *            Ｄom对象
 * @param _type
 *            style属性值 骆峰式写法
 * @returns ＣＳＳ属性值的字符串
 */
function getCurStyle( _obj, _type ) 
{
	// 此方法有兼容性问题，在IE6,Opera等部分浏览器的style与一般浏览器的写法不一至，
	// 举backgroundColor为例,则background-color
	if( (!+"\v1") )
	{
	    return _obj.currentStyle[_type];  
	} else 
	{
		_type = _type.replace( /([A-Z])/g, 
				function(all, letter) 
				{
					return '-' + letter.toLowerCase();  
				} );  
		return document.defaultView.getComputedStyle( _obj , null).getPropertyValue(_type);
	}
}

/**
 * 根据指定id获取对应的dom元素
 * @param id　对象的id
 * @param parent 父级对象(只能是窗口中的document对象)，可选参数(默认document)
 * @returns 找到的dom元素
 */
function get(id, parent) 
{
	if( parent != undefined && !parent) {
		return null;
	}
	return (parent || document).getElementById(id);
}

/**
 * 根据指定标签名获取对应的dom元素数组
 * @param tagName　对象的标签名
 * @param parent 父级对象，可选参数(默认document)
 * @returns 找到的dom元素数组
 */
function getByTag(tagName, parent) 
{
	if( parent != undefined && !parent) {
		return null;
	}
	return (parent || document).getElementsByTagName(tagName);
}

/**
 * 调试函数
 */
function debug(msg)
{
	var debug_info = window.debug_info;
	if (debug_info === undefined)
	{
		debug_info = document.createElement('div');
		debug_info.id = 'debug_info';
		debug_info.style.position = 'absolute';
		debug_info.style.left = '500px';
		debug_info.style.top = '500px';
		debug_info.style.color = 'red';
		debug_info.style.fontSize = '20px';
		document.body.appendChild(debug_info);
		window.debug_info = debug_info;
	}
	debug_info.innerHTML = msg;
}

/**
 * 测试类：查看指定对象的所有属性
 */
function showProp( obj ) {
	var str = '';
	for( var name in obj ) {
		str += '<h3 style="color:red">' + name + '</h3>' + ':' 
				+ ( obj[name] ? obj[name].toString() : obj[name] ) + '&nbsp;&nbsp;&nbsp;&nbsp;<font style="color:blue">类型:' //
				+ (typeof obj[name]) + '</font><br />';
	}
	//alert(str);
	var nwin_b = window.open('about:blank');
	nwin_b.document.writeln(str);
	nwin_b.document.close();
}


/**
 * 是否为数字
 * @param code
 */
function isNumber(s) {
	if(s == null || (typeof s) == 'undefined') {return false;}
	return (new RegExp('^\d')).test(s);
}

/*
 * 加入商品到购物车
 */
function addCart(code){
	myou.ajax({
		url: '/cartAddGoods.json',
		data: {code: code},
		success: function( text ) {
			window.location.href = '/cart.html';
			if(window.event != undefined){
		    	window.event.returnValue = false;
		    }
		}
	});
}