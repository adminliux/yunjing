/**
 * =================================================================
 * 系统类组件
 * 
 * @author      QipanLee
 * @email       panqili2120@sina.com
 * @corporation MYOU
 * @date     2011-10-25
 * @version  1.0
 * 
 *  =================================================================
 */

//document.write('<script src="' + baseJSPath + 'in-min.js" autoload="true" core="http://t.douban.com/js/jquery.min.js"></script>');

~function(){var __head=document.head||document.getElementsByTagName("head")[0];var __waterfall={};var __loaded={};var __loading={};var __configure={autoload:false,core:"",serial:false};var __in;var __load=function(url,type,charset,callback){if(__loading[url]){if(callback){setTimeout(function(){__load(url,type,charset,callback)},1);return}return}if(__loaded[url]){if(callback){callback();return}return}__loading[url]=true;var pureurl=url.split("?")[0];var n,t=type||pureurl.toLowerCase().substring(pureurl.lastIndexOf(".")+1);if(t==="js"){n=document.createElement("script");n.type="text/javascript";n.src=url;n.async="true";if(charset){n.charset=charset}}else{if(t==="css"){n=document.createElement("link");n.type="text/css";n.rel="stylesheet";n.href=url;__loaded[url]=true;__loading[url]=false;__head.appendChild(n);if(callback){callback()}return}}n.onload=n.onreadystatechange=function(){if(!this.readyState||this.readyState==="loaded"||this.readyState==="complete"){__loading[url]=false;__loaded[url]=true;if(callback){callback()}n.onload=n.onreadystatechange=null}};n.onerror=function(){__loading[url]=false;if(callback){callback()}n.onerror=null};__head.appendChild(n)};var __analyze=function(array){var riverflow=[];for(var i=array.length-1;i>=0;i--){var current=array[i];if(typeof(current)==="string"){if(!__waterfall[current]){console&&console.warn("model not found:"+current);continue}riverflow.push(current);var relylist=__waterfall[current].rely;if(relylist){riverflow=riverflow.concat(__analyze(relylist))}}else{if(typeof(current)==="function"){riverflow.push(current)}}}return riverflow};var __stackline=function(blahlist){var o=this;this.stackline=blahlist;this.current=this.stackline[0];this.bag={returns:[],complete:false};this.start=function(){if(typeof(o.current)!="function"&&__waterfall[o.current]){__load(__waterfall[o.current].path,__waterfall[o.current].type,__waterfall[o.current].charset,o.next)}else{o.bag.returns.push(o.current());o.next()}};this.next=function(){if(o.stackline.length==1||o.stackline.length<1){o.bag.complete=true;if(o.bag.oncomplete){o.bag.oncomplete(o.bag.returns)}return}o.stackline.shift();o.current=o.stackline[0];o.start()}};var __parallel=function(blahlist,callback){var length=blahlist.length;var hook=function(){if(!--length&&callback){callback()}};if(length==0){callback&&callback();return}for(var i=0;i<blahlist.length;i++){var current=__waterfall[blahlist[i]];if(typeof(blahlist[i])=="function"){blahlist[i]();hook();continue}if(current.rely&&current.rely.length!=0){__parallel(current.rely,(function(current){return function(){__load(current.path,current.type,current.charset,hook)}})(current))}else{__load(current.path,current.type,current.charset,hook)}}};var __add=function(name,config){if(!name||!config||!config.path){return}__waterfall[name]=config};var __adds=function(config){if(!config.modules){return}for(var module in config.modules){var module_config=config.modules[module];if(!config.modules.hasOwnProperty(module)){continue}if(config.type&&!module_config.type){module_config.type=config.type}if(config.charset&&!module_config.charset){module_config.charset=config.charset}__add.call(this,module,module_config)}};var __config=function(name,conf){__configure[name]=conf};var __css=function(csstext){var css=document.getElementById("in-inline-css");if(!css){css=document.createElement("style");css.type="text/css";css.id="in-inline-css";__head.appendChild(css)}if(css.styleSheet){css.styleSheet.cssText=css.styleSheet.cssText+csstext}else{css.appendChild(document.createTextNode(csstext))}};var __later=function(){var args=[].slice.call(arguments);var timeout=args.shift();window.setTimeout(function(){__in.apply(this,args)},timeout)};var __ready=function(){var args=arguments;__contentLoaded(window,function(){__in.apply(this,args)})};var __in=function(){var args=[].slice.call(arguments);if(__configure.serial){if(__configure.core&&!__loaded[__configure.core]){args=["__core"].concat(args)}var blahlist=__analyze(args).reverse();var stack=new __stackline(blahlist);stack.start();return stack.bag}if(typeof(args[args.length-1])==="function"){var callback=args.pop()}if(__configure.core&&!__loaded[__configure.core]){__parallel(["__core"],function(){__parallel(args,callback)})}else{__parallel(args,callback)}};var __contentLoaded=function(win,fn){var done=false,top=true,doc=win.document,root=doc.documentElement,add=doc.addEventListener?"addEventListener":"attachEvent",rem=doc.addEventListener?"removeEventListener":"detachEvent",pre=doc.addEventListener?"":"on",init=function(e){if(e.type=="readystatechange"&&doc.readyState!="complete"){return}(e.type=="load"?win:doc)[rem](pre+e.type,init,false);if(!done&&(done=true)){fn.call(win,e.type||e)}},poll=function(){try{root.doScroll("left")}catch(e){setTimeout(poll,50);return}init("poll")};if(doc.readyState=="complete"){fn.call(win,"lazy")}else{if(doc.createEventObject&&root.doScroll){try{top=!win.frameElement}catch(e){}if(top){poll()}}doc[add](pre+"DOMContentLoaded",init,false);doc[add](pre+"readystatechange",init,false);win[add](pre+"load",init,false)}};void function(){var myself=(function(){var scripts=document.getElementsByTagName("script");return scripts[scripts.length-1]})();var autoload=myself.getAttribute("autoload");var core=myself.getAttribute("core");if(core){__configure.autoload=eval(autoload);__configure.core=core;__add("__core",{path:__configure.core})}if(__configure.autoload&&__configure.core){__in()}}();__in.add=__add;__in.adds=__adds;__in.config=__config;__in.css=__css;__in.later=__later;__in.load=__load;__in.ready=__ready;__in.use=__in;this.In=__in}();

In.add('jquery',{path:'/js/jquery.min.js',type:'js',charset:'utf-8'});
In('jquery');

/***************************************************************************
 * 扩展系统方法
 * 
 */
String.prototype.trim = function() {
	var trimRef = /(^\s+)|(\s+$)/g;
	return this.toString().replace(trimRef, '');
};
String.prototype.equals = function(args) {
	(args == undefined) && (args = '');
	return this.toString() === args;
};
String.prototype.contains = function() {
	if (arguments.length < 1)
		return false;
	var curStr = this.toString();
	if (typeof arguments[0] == 'object' && arguments[0].length != undefined) {
		arguments = arguments[0];
	}
	for ( var i = 0; i < arguments.length; i++) {
		if (curStr.indexOf(arguments[i]) > -1) {
			return true;
		}
	}
	return false;
};
String.prototype.firstUpperCase = function() {
	var curStr = this.toString();
	if (curStr.length < 1)
		return;
	if (curStr.length == 1)
		return curStr.toUpperCase();
	return curStr.substring(0, 1).toUpperCase()
	+ curStr.substring(1, curStr.length);
};
/**
 * 定义一个Myou的框架类
 */
var MyouFramework = new Function();

MyouFramework.prototype.extend = function() {
	var arg = arguments[0];
	if(arguments.length === 2) {
		var arg1 = arguments[1];
		MyouFramework.prototype[arg] = arg1;
	} else if((typeof arguments[0]) === 'object'){
		for(var name in arg) {
			MyouFramework.prototype[name] = arg[name];
		}
	}
};

/**
 * 实例化MyouFramework的对象
 */
var myou = new MyouFramework();
//识别浏览器
myou.extend({
	/**
	 * 训别各各浏览器
	 */
	browser : {
		init : function() {
			if (this.name && this.edition)
				return;
			var usrAgent = navigator.userAgent;
			if (usrAgent.indexOf('MSIE ') > -1) {
				// Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1;
				// Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729;
				// .NET CLR 3.0.30729; Media Center PC 6.0)
				this.name = 'msie';
				usrAgent = usrAgent.substring(usrAgent.indexOf('MSIE '));
				this.edition = parseFloat(usrAgent.substring(4, usrAgent
						.indexOf(';')));
			} else if (usrAgent.indexOf('Firefox') > -1) {
				// Mozilla/5.0 (Windows NT 6.1; rv:10.0) Gecko/20100101
				// Firefox/10.0;
				this.name = 'firefox';
				this.edition = parseFloat(usrAgent.substring(usrAgent
						.indexOf('Firefox/') + 8));
			} else if (usrAgent.indexOf('Chrome') > -1) {
				// Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.7 (KHTML, like
				// Gecko) Chrome/16.0.912.63 Safari/535.7
				this.name = 'chrome';
				this.edition = parseFloat(usrAgent.substring(usrAgent
						.indexOf('Chrome/') + 7));
			} else if (usrAgent.indexOf('Safari') > -1) {
				// Mozilla/5.0 (Windows; U; Windows NT 5.2) AppleWebKit/525.13
				// (KHTML, like Gecko) Version/3.1 Safari/525.13
				// Mozilla/5.0 (iPhone; U; CPU like Mac OS X) AppleWebKit/420.1
				// (KHTML, like Gecko) Version/3.0 Mobile/4A93 Safari/419.3
				this.name = 'safari';
				this.edition = parseFloat(usrAgent.substring(usrAgent
						.indexOf('Version/') + 8));
			} else if (usrAgent.indexOf('Opera') > -1) {
				// Opera/9.80 (Windows NT 6.1; U; zh-cn) Presto/2.10.229
				// Version/11.61
				this.name = 'opera';
				this.edition = parseFloat(usrAgent.substring(usrAgent
						.indexOf('Version/') + 8));
			}
		},
		/**
		 * 浏览器名：msie firefox chrome safari opera
		 */
		name : '',
		/**
		 * 版本号 [float]
		 */
		edition : 0.0
	},
	/**
	 * 绑定页面事件
	 * 
	 * @param _eventName
	 */
	blindpage : {
		_funcs : [],
		add : function(_eventName, _desc_name, _func) {
			if (!this._funcs[_eventName]) {
				this._funcs[_eventName] = [];
			}
			// 过虑已绑定的事件,以_desc_name作为判断条件
			if ((typeof this._funcs[_eventName][_desc_name]) != 'undefined') {
				return;
			}
			this._funcs[_eventName][_desc_name] = _func;

			// 因为现在所需的事件还不多，所以直接硬编码的方式写了出来
			var cur_funcs_arr = this._funcs;
			if(cur_funcs_arr[_eventName]) {
				var methods = "";
				for ( var method in cur_funcs_arr[_eventName]) {
					if(typeof cur_funcs_arr[_eventName][method] === 'function')
						methods +=  cur_funcs_arr[_eventName][method].toString().replace(/function\s*\(\s*\)\s*\{/, ''). replace(/\}\s*$/,  '') + ';';
				}
				if( methods ) {
					eval('window.on' + _eventName + ' = function(){'  + methods + '}');
				}
			}
		}
	},

	/**
	 * 
	 * @param _argus {[url], [type], [data],[success], [cache]};
	 * 
	 */
	ajax : function(_argus) {

		var request;
		try {
			request = new XMLHttpRequest();
		} catch (trymicrosoft) {
			try {
				request = new ActiveXObject("Msxml2.XMLHTTP");
			} catch (othermicrosoft) {
				try {
					request = new ActiveXObject("Microsoft.XMLHTTP");
				} catch (failed) {
					return;
					//throw new exception('');
				}
				;
			}
			;
		}
		;

		// ====初始化参数值 =======================================

		// 创建默认的数组对象，用于封装参数
		_argus = (typeof _argus === 'undefined') ? [] : _argus;
		// 默认采用post提交
		_argus['type'] = (_argus['type'] || 'post').toString().toLowerCase();
		// 是否缓存
		_argus['cache'] = _argus['cache'] || false;
		_argus['contentType'] = _argus['method']
				|| 'application/x-www-form-urlencoded';
		// var request = this.getXMLHttpRequest();

		var d = _argus['data'] || [], vals = '';
		// 是否缓存，缓存的话加入一个随机数
		if (_argus['cache'] === false) {
			d['dnowtimes'] = new Date().getTime();
		}
		// 取数据
		for ( var name in d) {
			vals += name + '=' + d[name] + '&';
		}
		if (vals == '') {
			vals = null;
		} else if (vals.indexOf('&') > -1) {
			vals = vals.substring(0, vals.lastIndexOf('&'));
		}

		if (_argus['type'] === 'get' && vals != null) {
			_argus['url'] += (_argus['url'].indexOf('?') > -1) ? ('&' + vals)
					: ('?' + vals);
		}
		request.open(_argus['type'], _argus['url'], true);
		request.setRequestHeader('Content-Type',
				'application/x-www-form-urlencoded');
		request.onreadystatechange = function() {
			if (request.readyState == 4 && request.status == 200) {
				var t = request.responseText;
				if (typeof _argus['success'] === 'function') {
					_argus['success'](t);
				}
				;
			}
			;
		};

		request.send(_argus['type'] === 'post' ? vals : null);
	}
});
// 识别浏览器类型及版本号
myou.browser.init();
// 扩展方法
myou.extend({
	/**
	 * 常量
	 */
	constants: {
		
		/**
		 * 是否IE浏览器
		 */
		IS_IE: myou.browser.name === 'msie' ? true : false,
		
		/**
		 * 浏览器窗口的宽
		 */
		WINDOW_SIZE_X: 0,
		/**
		 * 浏览器窗口的高
		 */
		WINDOW_SIZE_Y: 0,
		/**
		 * 当前页面文档的宽
		 */
		//DOCUMENT_SIZE_X: 0,
		/**
		 * 当前页面文档的高
		 */
		//DOCUMENT_SIZE_Y: 0,
		/**
		 * 当出现滚动条时，向上的(空白间距)距离
		 */
		SCROLLBAR_TOP_LEN: 0,
		/**
		 * 当出现滚动条时，向左的(空白间距)距离
		 */
		SCROLLBAR_LEFT_LEN: 0
	}
});
// 绑定事件，动态改变常量值
// 设置初始值
setWinSize();
myou.blindpage.add('resize', 'set_screent_size', function() {
	setWinSize();
});
setScrollbarSize();
myou.blindpage.add('scroll', 'set_scrollbar_size', function() {
	setScrollbarSize();
});

/**
 * 根据指定id获取对应的dom元素
 * 
 * @param id
 *            对象的id
 * @param parent
 *            父级对象(只能是窗口中的document对象)，可选参数(默认document)
 * @returns 找到的dom元素
 */
function get(id, parent) {
	if (parent != undefined && !parent) {
		return null;
	}
	return (parent || document).getElementById(id);
}

/**
 * 获取临时的顶层窗口
 */
function getTempBox() {
	var tempObject = get('TEMP_OBJECT_CONTAINER');
	if (tempObject == null) {
		tempObject = document.createElement('div');
		tempObject.id = 'TEMP_OBJECT_CONTAINER';
		tempObject.style.height = '0';
		document.body.appendChild(tempObject);
	}
	return tempObject;
}
/**
 * 设置变量之窗口的高宽
 */
function setWinSize() {
	var brwEdi = parseInt(myou.browser.edition), val;
	if(myou.constants.IS_IE && brwEdi == 6) {		
		val = {x : document.documentElement.clientWidth, y : document.documentElement.clientHeight};
	} else {
		val = {x : window.innerWidth, y : window.innerHeight};
	}
	myou.constants.WINDOW_SIZE_X =  val.x,
	myou.constants.WINDOW_SIZE_Y =  val.y;
}

/**
 * 获取滚动条（隐藏）的高度，即页面向下翻页过程中被隐藏掉的上高度
 * @returns　{x : 0, y: 0}类型的数据
 */
function getDocScrollbarSize()
{
	var isSupportBody = (document.body != undefined), 
		isSupportEle = (document.documentElement != undefined);
	if( isSupportBody && isSupportEle  ) {
		return {
			x : document.body.scrollLeft || document.documentElement.scrollLeft || 0,
			y : document.body.scrollTop || document.documentElement.scrollTop || 0
		};
	} else if ( isSupportBody ) {
		return {
			x : document.body.scrollLeft,
			y : document.body.scrollTop
		};
	} else if ( isSupportEle ) {
		return {
			x : document.documentElement.scrollLeft,
			y : document.documentElement.scrollTop
		};
	}
	/*
	return {
		x: Math.max(document.body.scrollLeft,
				document.documentElement.scrollLeft),
		y: Math.max(document.body.scrollTop,
						document.documentElement.scrollTop)
	};
	 */
}

/**
 * 设置变量之-滚动条左右的空白距离
 */
function setScrollbarSize() {
	var val = getDocScrollbarSize();
	myou.constants.SCROLLBAR_LEFT_LEN =  val.x;
	myou.constants.SCROLLBAR_TOP_LEN  =  val.y;
}